{
	"objects" : [
		"add_path",
		"add_rstudio_project",
		"add_test_infrastructure",
		"add_travis",
		"as.package",
		"bash",
		"build",
		"build_github_devtools",
		"build_vignettes",
		"build_win",
		"check",
		"check_cran",
		"check_doc",
		"clean_dll",
		"clean_source",
		"clean_vignettes",
		"compile_dll",
		"compiler_flags",
		"cran_env_vars",
		"create",
		"create_description",
		"dev_example",
		"dev_help",
		"dev_meta",
		"dev_mode",
		"dev_packages",
		"devtest",
		"document",
		"eval_clean",
		"evalq_clean",
		"find_rtools",
		"find_topic",
		"get_path",
		"github_pat",
		"github_pull",
		"github_release",
		"has_devel",
		"has_tests",
		"imports_env",
		"in_dir",
		"inst",
		"install",
		"install_bitbucket",
		"install_deps",
		"install_git",
		"install_github",
		"install_gitorious",
		"install_local",
		"install_svn",
		"install_url",
		"install_version",
		"is.package",
		"lint",
		"load_all",
		"load_code",
		"load_data",
		"load_dll",
		"loaded_packages",
		"ns_env",
		"on_path",
		"parse_deps",
		"parse_ns_file",
		"pkg_env",
		"r_env_vars",
		"release",
		"release_checks",
		"reload",
		"revdep",
		"revdep_check",
		"revdep_check_save_logs",
		"revdep_check_save_summary",
		"revdep_check_summary",
		"revdep_maintainers",
		"run_examples",
		"session_info",
		"set_path",
		"setup",
		"show_news",
		"source_gist",
		"source_url",
		"submit_cran",
		"test",
		"unload",
		"use_appveyor",
		"use_build_ignore",
		"use_cran_comments",
		"use_data",
		"use_data_raw",
		"use_git_hook",
		"use_package",
		"use_package_doc",
		"use_rcpp",
		"use_readme_rmd",
		"use_revdep",
		"use_rstudio",
		"use_testthat",
		"use_travis",
		"use_vignette",
		"with_collate",
		"with_debug",
		"with_env",
		"with_envvar",
		"with_lib",
		"with_libpaths",
		"with_locale",
		"with_options",
		"with_par",
		"with_path"
	],
	"methods" : {
		"add_path" : "add_path(path, after = Inf) ",
		"add_rstudio_project" : "add_rstudio_project(pkg = \".\") ",
		"add_test_infrastructure" : "add_test_infrastructure(pkg = \".\") ",
		"add_travis" : "add_travis(pkg = \".\") ",
		"as.package" : "as.package(x = NULL) ",
		"bash" : "bash(pkg = \".\") ",
		"build" : "build(pkg = \".\", path = NULL, binary = FALSE, vignettes = TRUE, manual = FALSE, args = NULL, quiet = FALSE) ",
		"build_github_devtools" : "build_github_devtools(outfile = NULL) ",
		"build_vignettes" : "build_vignettes(pkg = \".\") ",
		"build_win" : "build_win(pkg = \".\", version = c(\"R-release\", \"R-devel\"), args = NULL, quiet = FALSE) ",
		"check" : "check(pkg = \".\", document = TRUE, cleanup = TRUE, cran = TRUE, check_version = FALSE, force_suggests = TRUE, args = NULL, build_args = NULL, quiet = FALSE, check_dir = tempdir(), ...) ",
		"check_cran" : "check_cran(pkgs, libpath = file.path(tempdir(), \"R-lib\"), srcpath = libpath, bioconductor = FALSE, type = getOption(\"pkgType\"), threads = getOption(\"Ncpus\",     1), check_dir = tempfile(\"check_cran\"), revdep_pkg = NULL) ",
		"check_doc" : "check_doc(pkg = \".\") ",
		"clean_dll" : "clean_dll(pkg = \".\") ",
		"clean_source" : "clean_source(path, quiet = FALSE) ",
		"clean_vignettes" : "clean_vignettes(pkg = \".\") ",
		"compile_dll" : "compile_dll(pkg = \".\", quiet = FALSE) ",
		"compiler_flags" : "compiler_flags(debug = FALSE) ",
		"cran_env_vars" : "cran_env_vars() ",
		"create" : "create(path, description = getOption(\"devtools.desc\"), check = FALSE, rstudio = TRUE) ",
		"create_description" : "create_description(path = \".\", extra = getOption(\"devtools.desc\"), quiet = FALSE) ",
		"dev_example" : "dev_example(topic) ",
		"dev_help" : "dev_help(topic, stage = \"render\", type = getOption(\"help_type\")) ",
		"dev_meta" : "dev_meta(name) ",
		"dev_mode" : "dev_mode(on = NULL, path = getOption(\"devtools.path\")) ",
		"dev_packages" : "dev_packages() ",
		"devtest" : "devtest(package) ",
		"document" : "document(pkg = \".\", clean = NULL, roclets = NULL, reload = TRUE) ",
		"eval_clean" : "eval_clean(expr, quiet = TRUE) ",
		"evalq_clean" : "evalq_clean(expr, quiet = TRUE) ",
		"find_rtools" : "find_rtools(debug = FALSE) ",
		"find_topic" : "find_topic(topic) ",
		"get_path" : "get_path() ",
		"github_pat" : "github_pat() ",
		"github_pull" : "github_pull(pull) ",
		"github_release" : "github_release() ",
		"has_devel" : "has_devel() ",
		"has_tests" : "has_tests() ",
		"imports_env" : "imports_env(pkg = \".\") ",
		"in_dir" : "in_dir(new, code) ",
		"inst" : "inst(name) ",
		"install" : "install(pkg = \".\", reload = TRUE, quick = FALSE, local = TRUE, args = getOption(\"devtools.install.args\"), quiet = FALSE, dependencies = NA, build_vignettes = FALSE, keep_source = getOption(\"keep.source.pkgs\"), threads = getOption(\"Ncpus\", 1)) ",
		"install_bitbucket" : "install_bitbucket(repo, username, ref = \"master\", subdir = NULL, auth_user = NULL, password = NULL, ...) ",
		"install_deps" : "install_deps(pkg = \".\", dependencies = NA, threads = getOption(\"Ncpus\", 1)) ",
		"install_git" : "install_git(url, subdir = NULL, branch = NULL, args = character(0), ...) ",
		"install_github" : "install_github(repo, username = NULL, ref = \"master\", subdir = NULL, auth_token = github_pat(), host = \"api.github.com\", ...) ",
		"install_gitorious" : "install_gitorious(repo, ref = \"master\", subdir = NULL, ...) ",
		"install_local" : "install_local(path, subdir = NULL, ...) ",
		"install_svn" : "install_svn(url, subdir = NULL, branch = NULL, args = character(0), ...) ",
		"install_url" : "install_url(url, subdir = NULL, config = list(), ...) ",
		"install_version" : "install_version(package, version = NULL, repos = getOption(\"repos\"), type = getOption(\"pkgType\"), ...) ",
		"is.package" : "is.package(x) ",
		"lint" : "lint(pkg = \".\", ...) ",
		"load_all" : "load_all(pkg = \".\", reset = TRUE, recompile = FALSE, export_all = TRUE, quiet = FALSE) ",
		"load_code" : "load_code(pkg = \".\") ",
		"load_data" : "load_data(pkg = \".\") ",
		"load_dll" : "load_dll(pkg = \".\") ",
		"loaded_packages" : "loaded_packages() ",
		"ns_env" : "ns_env(pkg = \".\") ",
		"on_path" : "on_path(...) ",
		"parse_deps" : "parse_deps(string) ",
		"parse_ns_file" : "parse_ns_file(pkg = \".\") ",
		"pkg_env" : "pkg_env(pkg = \".\") ",
		"r_env_vars" : "r_env_vars() ",
		"release" : "release(pkg = \".\", check = TRUE) ",
		"release_checks" : "release_checks(pkg = \".\", built_path = NULL) ",
		"reload" : "reload(pkg = \".\", quiet = FALSE) ",
		"revdep" : "revdep(pkg, dependencies = c(\"Depends\", \"Imports\", \"Suggests\", \"LinkingTo\"), recursive = FALSE, ignore = NULL, bioconductor = FALSE) ",
		"revdep_check" : "revdep_check(pkg = \".\", recursive = FALSE, ignore = NULL, dependencies = c(\"Depends\", \"Imports\", \"Suggests\", \"LinkingTo\"), libpath = getOption(\"devtools.revdep.libpath\"), srcpath = libpath, bioconductor = FALSE, type = getOption(\"pkgType\"), threads = getOption(\"Ncpus\", 1), check_dir = tempfile(\"check_cran\")) ",
		"revdep_check_save_logs" : "revdep_check_save_logs(res, log_dir = \"revdep\") ",
		"revdep_check_save_summary" : "revdep_check_save_summary(res, log_dir = \"revdep\") ",
		"revdep_check_summary" : "revdep_check_summary(res) ",
		"revdep_maintainers" : "revdep_maintainers(pkg = \".\") ",
		"run_examples" : "run_examples(pkg = \".\", start = NULL, show = TRUE, test = FALSE, run = TRUE, fresh = FALSE) ",
		"session_info" : "session_info(include_base = FALSE) ",
		"set_path" : "set_path(path) ",
		"setup" : "setup(path = \".\", description = getOption(\"devtools.desc\"), check = FALSE, rstudio = TRUE) ",
		"show_news" : "show_news(pkg = \".\", latest = TRUE, ...) ",
		"source_gist" : "source_gist(id, ..., sha1 = NULL, quiet = FALSE) ",
		"source_url" : "source_url(url, ..., sha1 = NULL) ",
		"submit_cran" : "submit_cran(pkg = \".\") ",
		"test" : "test(pkg = \".\", filter = NULL) ",
		"unload" : "unload(pkg = \".\") ",
		"use_appveyor" : "use_appveyor(pkg = \".\") ",
		"use_build_ignore" : "use_build_ignore(files, escape = TRUE, pkg = \".\") ",
		"use_cran_comments" : "use_cran_comments(pkg = \".\") ",
		"use_data" : "use_data(..., pkg = \".\", internal = FALSE, overwrite = FALSE, compress = \"bzip2\") ",
		"use_data_raw" : "use_data_raw(pkg = \".\") ",
		"use_git_hook" : "use_git_hook(hook, script, pkg = \".\") ",
		"use_package" : "use_package(package, type = \"Imports\", pkg = \".\") ",
		"use_package_doc" : "use_package_doc(pkg = \".\") ",
		"use_rcpp" : "use_rcpp(pkg = \".\") ",
		"use_readme_rmd" : "use_readme_rmd(pkg = \".\") ",
		"use_revdep" : "use_revdep(pkg = \".\") ",
		"use_rstudio" : "use_rstudio(pkg = \".\") ",
		"use_testthat" : "use_testthat(pkg = \".\") ",
		"use_travis" : "use_travis(pkg = \".\") ",
		"use_vignette" : "use_vignette(name, pkg = \".\") ",
		"with_collate" : "with_collate(new, code) ",
		"with_debug" : "with_debug(code, CFLAGS = NULL, CXXFLAGS = NULL, FFLAGS = NULL, FCFLAGS = NULL, debug = TRUE, action = \"replace\") ",
		"with_env" : "with_env(new, code) ",
		"with_envvar" : "with_envvar(new, code, action = \"replace\") ",
		"with_lib" : "with_lib(new, code) ",
		"with_libpaths" : "with_libpaths(new, code) ",
		"with_locale" : "with_locale(new, code) ",
		"with_options" : "with_options(new, code) ",
		"with_par" : "with_par(new, code) ",
		"with_path" : "with_path(new, code, add = TRUE) "
	}
}